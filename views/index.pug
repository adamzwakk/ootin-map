html
	head
		link(rel='stylesheet', href='./css/leaflet.css')
		script(src='./js/leaflet.js')
		script(src='./js/underscore-min.js')
		script(src='./js/jquery.min.js')

		style.
			#mapid { width:1920px; height:1080px; }
			.leaflet-container {
				background: #000;
			}
	body
		div(id='mapid')
		script.
			let entrances = !{entrances};
			let places = !{places};
			let activeNavLines = [];

			$(document).ready(function(){
				$.ajaxSetup({
				    async: false
				});

			 	var map = L.map('mapid', {
			 		minZoom:0,
			 		maxZoom: 7,
					zoom: 2,
			 		center: [-70,120],
			 	});
			 	L.tileLayer('./images/grid/{z}/{x}/{y}.jpg',{noWrap:true}).addTo(map);

			 	
			 	map.on('click',function(e){
			 		console.log(JSON.stringify(e.latlng));
			 	});

			 	function renderEntrances(){
				 	_.each(entrances,function(e){
			 			if(typeof e.from !== 'undefined'){
			 				if(typeof e.nick !== 'undefined'){
			 					title = e.nick+' ('+e.from+' -> '+e.to+')';
			 				} else {
				 				from = _.findWhere(places,{"id":e.from});
				 				to = _.findWhere(places,{"id":e.to});
				 				title = from.name+' -> '+to.name+' ('+e.from+' -> '+e.to+')';
			 				}
			 			} else {		 			
				 			if(typeof e.name == 'undefined'){
				 				title = e.lat+', '+e.lng;
				 			} else {
				 				title = e.name;
				 			}
			 			}
			 			var m = L.marker([e.lat, e.lng],{title:title});
			 			m.bindPopup(title).openPopup();
			 			m.addTo(map);
			 		});

			 		//var polyLine = L.polyline([[data.entrances[0].lat,data.entrances[0].lng],[data.entrances[3].lat,data.entrances[3].lng]],{color:'red'}).addTo(map);
			 	}

			 	function renderVanillaPaths(){
			 		let ent = entrances;
			 		let oneways = [];
			 		_.each(ent,function(e,i){
			 			let frome = e;
			 			let toe = _.findWhere(entrances,{to:frome.from,from:frome.to});
			 			if(typeof toe == 'undefined'){
							//console.log('Could not find exit for: '+frome.to);
			 				return;
			 			}

			 			if(oneways.includes(frome.from+'x'+frome.to)){
			 				//console.log('Already plotted this line one way, skipping');
			 				return;
			 			}

						let line = L.polyline([[frome.lat,frome.lng],[toe.lat,toe.lng]],{color:'red'}).addTo(map);
						oneways.push(toe.to+'x'+toe.from);
						activeNavLines.push(line);
			 		});
			 	}

			 	renderEntrances();
			 	renderVanillaPaths();
			})
